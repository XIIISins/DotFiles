#!/usr/bin/env python3
 
from subprocess import Popen, PIPE, DEVNULL
from datetime import datetime
 
app_conf = {
        "menu": ["rofi", "-dmenu", "-mesg", "Chose session or create new one!"],
        "term": ["urxvt", "-e sh -c"],
}
 
def session_list():
    sep = "|"
    props = [
            "id",
            "name",
            "windows",
            "attached",
            "created",
            ]
    format_str = sep.join([ "#{session_%s}" % prop for prop in props ])
 
    raw_sessions = Popen(["tmux", "list-sessions", "-F", format_str], stdout=PIPE).stdout.read().decode().strip().split('\n')
 
    def create_session_obj(session_data):
        o = dict()
        for prop, val in zip(props, session_data.split(sep)):
            o[prop] = val
        return o
 
    sessions = list(map(create_session_obj, raw_sessions))
     
    return sessions
 
def format_menu_item(session):
    return "{name} - {windows} windows - created at {created} - ({attach_status})".format(
                name=session.get('name', ''),
                windows=session.get('windows', ''),
                created=datetime.fromtimestamp(float(session.get('created', '0'))).strftime("%a %d %b %I:%M %p"),
                attach_status="Attached" if int(session.get('attached', '0')) else "Dettached",
                )
 
def get_user_choice(items):
    menu_pipe_data = "\n".join(items)
    user_choice = Popen(app_conf.get('menu'), stdout=PIPE, stdin=PIPE).communicate(input=menu_pipe_data.encode())[0]
    return user_choice.decode().strip()
 
def launch_term_with_cmd(cmd):
    return Popen(app_conf.get("term", ["urxvt", "-e sh -c "]) + [cmd], stdout=DEVNULL, stderr=DEVNULL)
 
def launch_session(session_name):
    return launch_term_with_cmd("tmux att -t %s" % session_name)
 
def create_session_and_launch(session_name):
    return launch_term_with_cmd("tmux new -s %s" % session_name)
 
def runner():
    sessions = session_list()
    items = list(map(format_menu_item, sessions))
    choice = get_user_choice(items)
    if not choice:
        return
    try:
        session = sessions[items.index(choice)]
        launch_session(session.get('name'))
    except ValueError:
        # choice not in list
        create_session_and_launch(choice)
    return
 
if __name__ == "__main__":
    runner()